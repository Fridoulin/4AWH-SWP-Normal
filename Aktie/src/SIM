import javafx.application.Application;
import org.w3c.dom.ls.LSOutput;

import java.io.IOException;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.function.DoubleToIntFunction;

public class SIM {
    public static AktieAPISQL a = new AktieAPISQL();
    static Connection connection = a.connection;
    static Statement myStmt = a.myStmt;
    static LocalDate kaufDatum;
    static double depot, depotAufgeteilt, bAHEndwert;
    public static ArrayList<String> dates = new ArrayList<>();
    public static ArrayList<Double> close = new ArrayList<>();
    public static ArrayList<Double> avg = new ArrayList<>();
    public static ArrayList<Double> zweihunderter = new ArrayList<>();
    public static ArrayList<String> zweihunderterBuySell = new ArrayList<>();
    public static ArrayList<String> zweihunderterDates = new ArrayList<>();
    public static ArrayList<Double> dreiProzent = new ArrayList<>();
    public static ArrayList<String> dreiProzentBuySell = new ArrayList<>();
    public static ArrayList<String> dreiProzentDates = new ArrayList<>();


    public static void main(String[] args) throws SQLException, IOException {
        inputData();
        a.inputUserTXT();
        db();
        depotAufgeteilt = depot / a.auswahlAktie.size();
        for (int i = 0; i < a.auswahlAktie.size(); i++) {
            getDataFormCalc(a.auswahlAktie.get(i));
            createTableSIM(a.auswahlAktie.get(i));
            zweihunderter(a.auswahlAktie.get(i));
            dreiProzent(a.auswahlAktie.get(i));
            buyAndHold(a.auswahlAktie.get(i));
        }
        output();

    }

    public static void inputData() {
        Scanner reader = new Scanner(System.in);
        String temp = "";
        String x = "1999-01-01";
        System.out.println("Kaufdatum [JJJJ-MM-DD]: ");
        temp = reader.next();
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("[yyyy,M,d][yyyy.M.d][yyyy-M-d][d/M/yyyy]");
        LocalDate firstDate = LocalDate.parse(temp, dtf);
        kaufDatum = LocalDate.parse(firstDate.format(DateTimeFormatter.ISO_LOCAL_DATE));
        if (kaufDatum.isBefore(LocalDate.parse(x))) {
            System.out.println("Falsches Datum (zu klein)");
            inputData();
        }
        if (kaufDatum.isAfter(LocalDate.now())) {
            System.out.println("Falsches Datum (nach Heute)");
            inputData();
        }
        System.out.println("Depot: ");
        depot = reader.nextDouble();
        if (depot < 0.01) {
            System.out.println("Depot zu klein");
            inputData();
        }
    }

    public static boolean db() {
        try {
            String DBurl = "jdbc:mysql://localhost:3306/" + a.aktienDB + "?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
            connection = DriverManager.getConnection(DBurl, "root", "NicerSpeck#");
            myStmt = connection.createStatement();
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public static void getDataFormCalc(String tempAktie) {
        try {

            ResultSet rsNormal = myStmt.executeQuery("SELECT * from " + tempAktie + "_calc where datum >= '" + kaufDatum + "'order by datum desc");
            while (rsNormal.next()) {
                dates.add(rsNormal.getString("datum"));
                close.add(rsNormal.getDouble("closeCorrect"));
                avg.add(rsNormal.getDouble("avg"));


            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static boolean createTableSIM(String tempAktie) throws SQLException {
        try {
            myStmt = connection.createStatement();
            String droptable = "drop table if exists " + tempAktie;
            String createtable200er = "create table if not exists " + tempAktie + "_200er (datum varchar(255) primary  key, flag varchar(255), Money double);";
            String createtable3Pro = "create table if not exists " + tempAktie + "_3Pro (datum varchar(255) primary  key, flag varchar(255), Money double);";
            String createtableBaH = "create table if not exists " + tempAktie + "_BaH (kaufdatum varchar(255) primary  key, verkaufsdatum varchar(255), depot double, Money double, anteile double);";
            myStmt.executeUpdate(droptable);
            myStmt.executeUpdate(createtable200er);
            myStmt.executeUpdate(createtable3Pro);
            myStmt.executeUpdate(createtableBaH);

            return true;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public static void zweihunderter(String tempAktie) {
        double temp, rest = 0, anteile = 0, tempSell = 0, depotzw = depotAufgeteilt;
        boolean buy = true;
        for (int i = 0; i < dates.size(); i++) {
            if (avg.get(i) < close.get(i) && buy) {
                temp = (depotzw / close.get(i));
                rest = temp;
                anteile = (int) temp;
                rest = (rest - anteile) * close.get(i);
                buy = false;
                zweihunderterBuySell.add("buy");
                zweihunderterDates.add(dates.get(i));
                zweihunderter.add(0.0);
            }
            if (avg.get(i) > close.get(i) && !buy) {
                tempSell = ((anteile * close.get(i)) + rest);
                buy = true;
                zweihunderterBuySell.add("sell");
                zweihunderter.add(tempSell);
                zweihunderterDates.add(dates.get(i));
                depotzw = tempSell;
                anteile = 0;
            }
        }
        if (zweihunderterBuySell.get(zweihunderterBuySell.size() - 1) == "buy") {
            tempSell = ((anteile * close.get(close.size() - 1)) + rest);
            buy = true;
            zweihunderterBuySell.add("sell");
            zweihunderter.add(tempSell);
            depotzw = tempSell;
            anteile = 0;
        }
        try {
            for (int i = 0; i < zweihunderterDates.size(); i++) {
                String writeData = "insert ignore into " + tempAktie + "_200er (datum, flag, Money) values('" + zweihunderterDates.get(i) + "', '" + zweihunderterBuySell.get(i) + "', '" + zweihunderter.get(i) + "');";
                myStmt.executeUpdate(writeData);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void dreiProzent(String tempAktie) {
        double temp, rest = 0, anteile = 0, tempSell = 0, depotzw = depotAufgeteilt;
        boolean buy = true, durchlauf = true;
        for (int i = 0; i < dates.size(); i++) {
            if (avg.get(i) < close.get(i) * 1.03 && buy && durchlauf) {
                temp = (depotzw / close.get(i));
                rest = temp;
                anteile = (int) temp;
                rest = (rest - anteile) * close.get(i);
                buy = false;
                durchlauf = false;
                dreiProzentBuySell.add("buy");
                dreiProzentDates.add(dates.get(i));
                dreiProzent.add(0.0);
            }
            if (avg.get(i) > close.get(i) * 0.97 && !buy && durchlauf) {
                tempSell = ((anteile * close.get(i)) + rest);
                buy = true;
                dreiProzentBuySell.add("sell");
                dreiProzent.add(tempSell);
                dreiProzentDates.add(dates.get(i));
                depotzw = tempSell;
                anteile = 0;
            }
            durchlauf = true;
        }
        if (dreiProzentBuySell.get(dreiProzentBuySell.size() - 1) == "buy") {
            tempSell = ((anteile * close.get(close.size() - 1)) + rest);
            buy = true;
            dreiProzentBuySell.add("sell");
            dreiProzent.add(tempSell);
            depotzw = tempSell;
            anteile = 0;
        }
        try {
            for (int i = 0; i < dreiProzentDates.size(); i++) {
                String writeData = "insert ignore into " + tempAktie + "_3Pro (datum, flag, Money) values('" + dreiProzentDates.get(i) + "', '" + dreiProzentBuySell.get(i) + "', '" + dreiProzent.get(i) + "');";
                myStmt.executeUpdate(writeData);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void buyAndHold(String tempAktie) {
        String kaufdatum = "", verkaufsdatum = "";
        double temp, rest = 0, anteile = 0, tempSell = 0, depotzw = depotAufgeteilt;

        try {
            ResultSet rsNormal = myStmt.executeQuery("SELECT * from " + tempAktie + "_calc where datum >= '" + kaufDatum + "'order by datum asc limit 1");
            while (rsNormal.next()) {
                kaufdatum = rsNormal.getString("datum");
            }
            temp = (depotzw / close.get(close.size() - 1));

            rest = temp;
            anteile = (int) temp;
            rest = (rest - anteile) * close.get(close.size() - 1);

        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            ResultSet rsNormal = myStmt.executeQuery("SELECT * from " + tempAktie + "_calc where datum >= '" + kaufDatum + "'order by datum desc limit 1");
            while (rsNormal.next()) {
                verkaufsdatum = rsNormal.getString("datum");
            }
            tempSell = ((anteile * close.get(0)) + rest);
            bAHEndwert = bAHEndwert + tempSell;
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
            for (int i = 0; i < 2; i++) {
                String writeData = "insert ignore into " + tempAktie + "_BaH (kaufdatum, verkaufsdatum, depot, Money, anteile) values('" + kaufdatum + "', '" + verkaufsdatum + "', '" + depot + "', '" + depotzw + "', '" + anteile + "');";
                myStmt.executeUpdate(writeData);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }


    public static void output() {
        double tempZweihunderter = 0, tempDreiProzent = 0;
        for (int i = 0; i < zweihunderter.size(); i++) {
            tempZweihunderter = tempZweihunderter + zweihunderter.get(i);
            tempDreiProzent = tempDreiProzent + dreiProzent.get(i);

        }
        System.out.printf("200er gesamt: " + String.format("%.2f", (tempZweihunderter - depotAufgeteilt)) + "     prozentuale Veränderung: " + Math.round(((tempZweihunderter - depotAufgeteilt) / depotAufgeteilt) * 100) + " Prozent");
        System.out.println(" ");
        System.out.printf("3 Prozent gesamt: " + String.format("%.2f", (tempDreiProzent - depotAufgeteilt)) + "     prozentuale Veränderung: " + Math.round(((tempDreiProzent - depotAufgeteilt) / depotAufgeteilt) * 100) + " Prozent");
        System.out.println(" ");
        System.out.printf("Buy and Hold gesamt: " + String.format("%.2f", (bAHEndwert - depotAufgeteilt)) + "     prozentuale Veränderung: " + Math.round(((bAHEndwert - depotAufgeteilt) / depotAufgeteilt) * 100) + " Prozent");
        System.out.println("");

    }
}

